From 28ff84b3ef145c9e18f1d51dab5b68a8dd4f462e Mon Sep 17 00:00:00 2001
From: Joel Yliluoma <joel.yliluoma@iki.fi>
Date: Thu, 28 Dec 2017 16:46:23 +0200
Subject: [PATCH 16/16] Add support for xterm-256color

---
 include/timer.h             |   2 +-
 src/hardware/vga_draw.cpp   | 517 ++++++++++++++++++++++++++++++--------------
 src/hardware/vga_memory.cpp |  23 ++
 3 files changed, 380 insertions(+), 162 deletions(-)

diff --git a/include/timer.h b/include/timer.h
index b4be740..a0119eb 100644
--- a/include/timer.h
+++ b/include/timer.h
@@ -24,7 +24,7 @@
 
 #define PIT_TICK_RATE 1193182
 
-#define GetTicks() SDL_GetTicks()
+#define GetTicks() (SDL_GetTicks() * 32)
 
 typedef void (*TIMER_TickHandler)(void);
 
diff --git a/src/hardware/vga_draw.cpp b/src/hardware/vga_draw.cpp
index f0ba8c6..bdd5bb7 100644
--- a/src/hardware/vga_draw.cpp
+++ b/src/hardware/vga_draw.cpp
@@ -367,15 +367,27 @@ static Bit8u * VGA_TEXT_Draw_Line(Bitu vidstart, Bitu line) {
 	Bit32u * draw=(Bit32u *)TempLine;
 	const Bit8u* vidmem = VGA_Text_Memwrap(vidstart);
 	for (Bitu cx=0;cx<vga.draw.blocks;cx++) {
-		Bitu chr=vidmem[cx*2];
-		Bitu col=vidmem[cx*2+1];
-		Bitu font=vga.draw.font_tables[(col >> 3)&1][chr*32+line];
-		Bit32u mask1=TXT_Font_Table[font>>4] & FontMask[col >> 7];
-		Bit32u mask2=TXT_Font_Table[font&0xf] & FontMask[col >> 7];
-		Bit32u fg=TXT_FG_Table[col&0xf];
-		Bit32u bg=TXT_BG_Table[col>>4];
-		*draw++=(fg&mask1) | (bg&~mask1);
-		*draw++=(fg&mask2) | (bg&~mask2);
+		Bitu chr = vidmem[cx*2   ];
+		Bitu col = vidmem[cx*2 + 1];
+
+		Bit32u ext1 = vidmem[cx*2 + 0x8000];
+		Bit32u ext2 = vidmem[cx*2 + 0x8001];
+		
+		bool flag_underline = ext2 & 0x01;
+		bool flag_dim       = ext2 & 0x02;
+		bool flag_italic    = ext2 & 0x04;
+		bool flag_bold      = ext2 & 0x08;
+		bool flag_blink     = ext2 & 0x20;
+
+		
+		Bit32u fg = TXT_FG_Table[col & 0xF];
+		Bit32u bg = TXT_BG_Table[col >> 4];
+
+		Bitu font= vga.draw.font_tables[(col >> 3)&1][chr*32+line];
+		Bit32u mask1 = TXT_Font_Table[font>>4] & FontMask[col >> 7];
+		Bit32u mask2 = TXT_Font_Table[font&0xf] & FontMask[col >> 7];
+		*draw++ = (fg&mask1) | (bg&~mask1);
+		*draw++ = (fg&mask2) | (bg&~mask2);
 	}
 	/* BISQWIT FPS-hack change:  blink rate 8 (for default 70fps) -> 14 */
 	if (!vga.draw.cursor.enabled || !((vga.draw.cursor.count/14)&1)) goto skip_cursor;
@@ -449,169 +461,352 @@ skip_cursor:
 	return TempLine;
 }
 
-static Bit8u * VGA_TEXT_Xlat16_Draw_Line(Bitu vidstart, Bitu line) {
-	Bits font_addr;
-	Bit16u * draw=(Bit16u *)TempLine;
-	const Bit8u* vidmem = VGA_Text_Memwrap(vidstart);
-	for (Bitu cx=0;cx<vga.draw.blocks;cx++) {
-		Bitu chr=vidmem[cx*2];
-		Bitu col=vidmem[cx*2+1];
-		Bitu font=vga.draw.font_tables[(col >> 3)&1][chr*32+line];
-		Bit32u mask1=TXT_Font_Table[font>>4] & FontMask[col >> 7];
-		Bit32u mask2=TXT_Font_Table[font&0xf] & FontMask[col >> 7];
-		Bit32u fg=TXT_FG_Table[col&0xf];
-		Bit32u bg=TXT_BG_Table[col>>4];
-		
-		mask1=(fg&mask1) | (bg&~mask1);
-		mask2=(fg&mask2) | (bg&~mask2);
+#define Make16(r,g,b) (((unsigned(b))&0x1F) | (((unsigned(g)<<1)&0x3F)<<5) | (((unsigned(r))&0x1F)<<11))
+static unsigned short xterm256table[256] =
+    { Make16(0,0,0), Make16(21,0,0), Make16(0,21,0), Make16(21,5,0),
+      Make16(0,0,21), Make16(21,0,21), Make16(0,21,21), Make16(21,21,21),
+      Make16(7,7,7), Make16(31,5,5), Make16(5,31,5), Make16(31,31,5),
+      Make16(5,5,31), Make16(31,5,31), Make16(5,31,31), Make16(31,31,31) };
+#include <cmath>
+static unsigned short xterm256_blend12[256][256];
+static struct xterm256init { xterm256init() {
+    static const unsigned char grayramp[24] = { 1,2,3,5,6,7,8,9,11,12,13,14,16,17,18,19,20,22,23,24,25,27,28,29 };
+    static const unsigned char colorramp[6] = { 0,12,16,21,26,31 };
+    for(unsigned n=0; n<216; ++n) { xterm256table[16+n] = Make16(colorramp[(n/36)%6], colorramp[(n/6)%6], colorramp[(n)%6]); }
+    for(unsigned n=0; n<24; ++n)  { xterm256table[232 + n] = Make16(grayramp[n],grayramp[n],grayramp[n]); }
+
+    static constexpr double gamma = 2.0, ratio = 1./4;
+    #define blend12(a, b, max) unsigned(\
+       std::pow((std::pow(double(a/double(max)), gamma) * (1-ratio) \
+               + std::pow(double(b/double(max)), gamma) * ratio), 1/gamma) * max)
+
+    #define blend12_16bit(c1, c2) \
+        (blend12(((c1>> 0u)&0x1F), ((c2>> 0u)&0x1F), 0x1F) << 0u) \
+      + (blend12(((c1>> 5u)&0x3F), ((c2>> 5u)&0x3F), 0x3F) << 5u) \
+      + (blend12(((c1>>11u)&0x1F), ((c2>>11u)&0x1F), 0x1F) <<11u)
+    for(unsigned a=0; a<256; ++a)
+    for(unsigned b=0; b<256; ++b)
+        xterm256_blend12[a][b] = blend12_16bit(xterm256table[a], xterm256table[b]);
+    #undef blend12
+} } xterm256init;
+#undef Make16
 
-		for(int i = 0; i < 4; i++) {
-			*draw++ = vga.dac.xlat16[(mask1>>8*i)&0xff];
-		}
-		for(int i = 0; i < 4; i++) {
-			*draw++ = vga.dac.xlat16[(mask2>>8*i)&0xff];
-		}
-	}
-	/* BISQWIT FPS-hack change:  blink rate 8 (for default 70fps) -> 14 */
-	if (!vga.draw.cursor.enabled || !((vga.draw.cursor.count/14)&1)) goto skip_cursor;
-	font_addr = (vga.draw.cursor.address-vidstart) >> 1;
-	if (font_addr>=0 && font_addr<(Bits)vga.draw.blocks) {
-		if (line<vga.draw.cursor.sline) goto skip_cursor;
-		if (line>vga.draw.cursor.eline) goto skip_cursor;
-		draw=(Bit16u *)&TempLine[font_addr*16];
-		Bit8u att=(Bit8u)(TXT_FG_Table[vga.tandy.draw_base[vga.draw.cursor.address+1]&0xf]&0xff);
-		for(int i = 0; i < 8; i++) {
-			*draw++ = vga.dac.xlat16[att];
-		}
-	}
-skip_cursor:
-	return TempLine;
+static Bit8u * VGA_TEXT_Xlat16_Draw_Line(Bitu vidstart, Bitu line) {
+        Bit16u * draw=(Bit16u *)TempLine;
+        const Bit8u* vidmem = VGA_Text_Memwrap(vidstart);
+
+        Bitu cursor_position = ~Bitu();
+
+        /* BISQWIT FPS-hack change:  blink rate 8 (for default 70fps) -> 14 */
+        if (!vga.draw.cursor.enabled || !((vga.draw.cursor.count/14)&1)) goto skip_cursor;
+        {Bits font_addr = (vga.draw.cursor.address-vidstart) >> 1;
+        if (font_addr>=0 && font_addr<(Bits)vga.draw.blocks) {
+                if (line<vga.draw.cursor.sline) goto skip_cursor;
+                if (line>vga.draw.cursor.eline) goto skip_cursor;
+                cursor_position = font_addr;
+        }}
+skip_cursor:;
+
+        for (Bitu cx=0;cx<vga.draw.blocks;cx++) {
+                Bitu chr=vidmem[cx*2];
+                Bitu col=vidmem[cx*2+1];
+                Bitu font=vga.draw.font_tables[(col >> 3)&1][chr*32+line];
+
+                Bitu ext1 = vidmem[cx*2 + 0x8000];
+                Bitu ext2 = vidmem[cx*2 + 0x8001];
+                if(ext2 == 7 && ext1 == 0x20) ext2 = ext1 = 0;
+
+                bool flag_underline = ext2 & 0x01;
+                bool flag_dim       = ext2 & 0x02;
+                bool flag_italic    = ext2 & 0x04;
+                bool flag_bold      = ext2 & 0x08;
+                bool flag_blink     = ext2 & 0x20;
+                bool flag_ext       = (ext2 & col & 0x80);
+
+                if(!flag_ext)
+                {
+                    flag_blink = col >> 7;
+                    ext1       = col>>4;   ext1 = (ext1&1)*4 + (ext1&2) + (ext1&4)/4 + (ext1&8);
+                    col        = (col&15); col = (col&1)*4 + (col&2) + (col&4)/4 + (col&8);
+                }
+
+                if(cx == cursor_position)
+                    font = 0xFF;
+                else
+                {
+                    if(flag_italic && line < vga.draw.address_line_total/4) font >>= 1;
+                    if(!FontMask[flag_blink]) font = 0;
+                    if(vga.draw.cursor.eline == 7)
+                    {
+                        // Check underline from LINE ABOVE
+                        if(line == 0 && vidstart > 0)
+                        {
+                            unsigned offset = vga.draw.blocks*2;
+                            Bit8u prev_ext1 = vidmem[cx*2 + 0x8000 - offset];
+                            Bit8u prev_ext2 = vidmem[cx*2 + 0x8001 - offset];
+                            if(prev_ext2 & 1) { /*widefont = 0x1FF;*/ ext1 = 8; col = (col & 0xF) | 0x80; }
+                        }
+                    }
+                    else
+                    {
+                        if(flag_underline && line == vga.draw.cursor.eline)
+                        {
+                            //widefont = 0x1FF;
+                            ext1 = 8; col = (col & 0xF) | 0x80;
+                        }
+                    }
+                }
+
+                unsigned fg_attr = (col & 0x7F) | ((ext2 & 0x40) << 1);
+                unsigned bg_attr = ext1;
+                Bit32u fg = xterm256table[fg_attr];
+                Bit32u bg = xterm256table[bg_attr];
+
+                switch(flag_italic ? line*4/vga.draw.address_line_total : 0)
+                {
+                    case 0: case 3:
+                        if(flag_bold)
+                            for(unsigned i = 0; i < 8; i++)
+                            {
+                                bool now  = (font) & (1u << (7-i));
+                                bool prev = (font) & (1u << (8-i));
+                                *draw++ = now ? fg : (prev ? xterm256_blend12[bg_attr][fg_attr] : bg);
+                            }
+                        else
+                            for(unsigned i = 0; i < 8; i++)
+                            {
+                                *draw++ = (font & (1u << (7-i))) ? fg : bg;
+                            }
+                        break;
+                    case 2:
+                        if(flag_bold) font |= font >> 1;
+                        for(unsigned i = 0; i < 8; i++)
+                        {
+                            bool now  = (font<<1) & (1u << (8-i));
+                            bool next = (font   ) & (1u << (8-i));
+                            *draw++ = xterm256_blend12[now?fg_attr:bg_attr][next?fg_attr:bg_attr];
+                        }
+                        break;
+                    case 1:
+                        if(flag_bold) font |= font >> 1;
+                        for(unsigned i = 0; i < 8; i++)
+                        {
+                            bool now  = (font<<1) & (1u << (8-i));
+                            bool next = (font   ) & (1u << (8-i));
+                            *draw++ = xterm256_blend12[next?fg_attr:bg_attr][now?fg_attr:bg_attr];
+                        }
+                        break;
+                }
+        }
+        return TempLine;
 }
 
 /*
 static Bit8u * VGA_TEXT_Draw_Line_9(Bitu vidstart, Bitu line) {
-	Bits font_addr;
-	Bit8u * draw=(Bit8u *)TempLine;
-	bool underline=(Bitu)(vga.crtc.underline_location&0x1f)==line;
-	Bit8u pel_pan=(Bit8u)vga.draw.panning;
-	if ((vga.attr.mode_control&0x20) && (vga.draw.lines_done>=vga.draw.split_line)) pel_pan=0;
-	const Bit8u* vidmem = VGA_Text_Memwrap(vidstart);
-	Bit8u chr=vidmem[0];
-	Bit8u col=vidmem[1];
-	Bit8u font=(vga.draw.font_tables[(col >> 3)&1][chr*32+line])<<pel_pan;
-	if (underline && ((col&0x07) == 0x01)) font=0xff;
-	Bit8u fg=col&0xf;
-	Bit8u bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
-	Bitu draw_blocks=vga.draw.blocks;
-	draw_blocks++;
-	for (Bitu cx=1;cx<draw_blocks;cx++) {
-		if (pel_pan) {
-			chr=vidmem[cx*2];
-			col=vidmem[cx*2+1];
-			if (underline && ((col&0x07) == 0x01)) font|=0xff>>(8-pel_pan);
-			else font|=vga.draw.font_tables[(col >> 3)&1][chr*32+line]>>(8-pel_pan);
-			fg=col&0xf;
-			bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
-		} else {
-			chr=vidmem[(cx-1)*2];
-			col=vidmem[(cx-1)*2+1];
-			if (underline && ((col&0x07) == 0x01)) font=0xff;
-			else font=vga.draw.font_tables[(col >> 3)&1][chr*32+line];
-			fg=col&0xf;
-			bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
-		}
-		if (FontMask[col>>7]==0) font=0;
-		*draw++=(font&0x80)?fg:bg;		*draw++=(font&0x40)?fg:bg;
-		*draw++=(font&0x20)?fg:bg;		*draw++=(font&0x10)?fg:bg;
-		*draw++=(font&0x08)?fg:bg;		*draw++=(font&0x04)?fg:bg;
-		*draw++=(font&0x02)?fg:bg;
-		Bit8u last=(font&0x01)?fg:bg;
-		*draw++=last;
-		*draw++=((vga.attr.mode_control&0x04) && ((chr<0xc0) || (chr>0xdf))) ? bg : last;
-		if (pel_pan) {
-			if (underline && ((col&0x07) == 0x01)) font=0xff;
-			else font=(vga.draw.font_tables[(col >> 3)&1][chr*32+line])<<pel_pan;
-		}
-	}
-	// BISQWIT FPS-hack change:  blink rate 8 (for default 70fps) -> 14
-	if (!vga.draw.cursor.enabled || !((vga.draw.cursor.count/14)&1)) goto skip_cursor;
-	font_addr = (vga.draw.cursor.address-vidstart) >> 1;
-	if (font_addr>=0 && font_addr<(Bits)vga.draw.blocks) {
-		if (line<vga.draw.cursor.sline) goto skip_cursor;
-		if (line>vga.draw.cursor.eline) goto skip_cursor;
-		draw=&TempLine[font_addr*9];
-		Bit8u fg=vga.tandy.draw_base[vga.draw.cursor.address+1]&0xf;
-		*draw++=fg;		*draw++=fg;		*draw++=fg;		*draw++=fg;
-		*draw++=fg;		*draw++=fg;		*draw++=fg;		*draw++=fg;
-	}
+        Bits font_addr;
+        Bit8u * draw=(Bit8u *)TempLine;
+        bool underline=(Bitu)(vga.crtc.underline_location&0x1f)==line;
+        Bit8u pel_pan=(Bit8u)vga.draw.panning;
+        if ((vga.attr.mode_control&0x20) && (vga.draw.lines_done>=vga.draw.split_line)) pel_pan=0;
+        const Bit8u* vidmem = VGA_Text_Memwrap(vidstart);
+        Bit8u chr=vidmem[0];
+        Bit8u col=vidmem[1];
+        Bit8u font=(vga.draw.font_tables[(col >> 3)&1][chr*32+line])<<pel_pan;
+        if (underline && ((col&0x07) == 0x01)) font=0xff;
+        Bit8u fg=col&0xf;
+        Bit8u bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
+        Bitu draw_blocks=vga.draw.blocks;
+        draw_blocks++;
+        for (Bitu cx=1;cx<draw_blocks;cx++) {
+                if (pel_pan) {
+                        chr=vidmem[cx*2];
+                        col=vidmem[cx*2+1];
+                        if (underline && ((col&0x07) == 0x01)) font|=0xff>>(8-pel_pan);
+                        else font|=vga.draw.font_tables[(col >> 3)&1][chr*32+line]>>(8-pel_pan);
+                        fg=col&0xf;
+                        bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
+                } else {
+                        chr=vidmem[(cx-1)*2];
+                        col=vidmem[(cx-1)*2+1];
+                        if (underline && ((col&0x07) == 0x01)) font=0xff;
+                        else font=vga.draw.font_tables[(col >> 3)&1][chr*32+line];
+                        fg=col&0xf;
+                        bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
+                }
+                if (FontMask[col>>7]==0) font=0;
+                *draw++=(font&0x80)?fg:bg;                *draw++=(font&0x40)?fg:bg;
+                *draw++=(font&0x20)?fg:bg;                *draw++=(font&0x10)?fg:bg;
+                *draw++=(font&0x08)?fg:bg;                *draw++=(font&0x04)?fg:bg;
+                *draw++=(font&0x02)?fg:bg;
+                Bit8u last=(font&0x01)?fg:bg;
+                *draw++=last;
+                *draw++=((vga.attr.mode_control&0x04) && ((chr<0xc0) || (chr>0xdf))) ? bg : last;
+                if (pel_pan) {
+                        if (underline && ((col&0x07) == 0x01)) font=0xff;
+                        else font=(vga.draw.font_tables[(col >> 3)&1][chr*32+line])<<pel_pan;
+                }
+        }
+        // BISQWIT FPS-hack change:  blink rate 8 (for default 70fps) -> 14
+        if (!vga.draw.cursor.enabled || !((vga.draw.cursor.count/14)&1)) goto skip_cursor;
+        font_addr = (vga.draw.cursor.address-vidstart) >> 1;
+        if (font_addr>=0 && font_addr<(Bits)vga.draw.blocks) {
+                if (line<vga.draw.cursor.sline) goto skip_cursor;
+                if (line>vga.draw.cursor.eline) goto skip_cursor;
+                draw=&TempLine[font_addr*9];
+                Bit8u fg=vga.tandy.draw_base[vga.draw.cursor.address+1]&0xf;
+                *draw++=fg;                *draw++=fg;                *draw++=fg;                *draw++=fg;
+                *draw++=fg;                *draw++=fg;                *draw++=fg;                *draw++=fg;
+        }
 skip_cursor:
-	return TempLine;
+        return TempLine;
 }
 */
 
 static Bit8u * VGA_TEXT_Xlat16_Draw_Line_9(Bitu vidstart, Bitu line) {
-	Bits font_addr;
-	Bit16u * draw=(Bit16u *)TempLine;
-	bool underline=(Bitu)(vga.crtc.underline_location&0x1f)==line;
-	Bit8u pel_pan=(Bit8u)vga.draw.panning;
-	if ((vga.attr.mode_control&0x20) && (vga.draw.lines_done>=vga.draw.split_line)) pel_pan=0;
-	const Bit8u* vidmem = VGA_Text_Memwrap(vidstart);
-	Bit8u chr=vidmem[0];
+        Bit16u * draw=(Bit16u *)TempLine;
+        bool underline=(Bitu)(vga.crtc.underline_location&0x1f)==line;
+        Bit8u pel_pan=(Bit8u)vga.draw.panning;
+        if ((vga.attr.mode_control&0x20) && (vga.draw.lines_done>=vga.draw.split_line)) pel_pan=0;
+        const Bit8u* vidmem = VGA_Text_Memwrap(vidstart);
+        Bit8u chr=vidmem[0];
 	Bit8u col=vidmem[1];
-	Bit8u font=(vga.draw.font_tables[(col >> 3)&1][chr*32+line])<<pel_pan;
-	if (underline && ((col&0x07) == 0x01)) font=0xff;
-	Bit8u fg=col&0xf;
-	Bit8u bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
-	Bitu draw_blocks=vga.draw.blocks;
-	draw_blocks++;
-	for (Bitu cx=1;cx<draw_blocks;cx++) {
-		if (pel_pan) {
-			chr=vidmem[cx*2];
-			col=vidmem[cx*2+1];
-			if (underline && ((col&0x07) == 0x01)) font|=0xff>>(8-pel_pan);
-			else font|=vga.draw.font_tables[(col >> 3)&1][chr*32+line]>>(8-pel_pan);
-			fg=col&0xf;
-			bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
-		} else {
-			chr=vidmem[(cx-1)*2];
-			col=vidmem[(cx-1)*2+1];
-			if (underline && ((col&0x07) == 0x01)) font=0xff;
-			else font=vga.draw.font_tables[(col >> 3)&1][chr*32+line];
-			fg=col&0xf;
-			bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
-		}
-		if (FontMask[col>>7]==0) font=0;
-		Bit8u mask=0x80;
-		for (int i = 0; i < 7; i++) {
-			*draw++=vga.dac.xlat16[font&mask?fg:bg];
-			mask>>=1;
-		}
-		Bit16u lastval=vga.dac.xlat16[font&mask?fg:bg];
-		*draw++=lastval;
-		*draw++=(((vga.attr.mode_control&0x04) && ((chr<0xc0) || (chr>0xdf))) && 
-			!(underline && ((col&0x07) == 0x01))) ? 
-			(vga.dac.xlat16[bg]) : lastval;
-		if (pel_pan) {
-			if (underline && ((col&0x07) == 0x01)) font=0xff;
-			else font=(vga.draw.font_tables[(col >> 3)&1][chr*32+line])<<pel_pan;
-		}
-	}
-	/* BISQWIT FPS-hack change:  blink rate 8 (for default 70fps) -> 14 */
-	if (!vga.draw.cursor.enabled || !((vga.draw.cursor.count/14)&1)) goto skip_cursor;
-	font_addr = (vga.draw.cursor.address-vidstart) >> 1;
-	if (font_addr>=0 && font_addr<(Bits)vga.draw.blocks) {
-		if (line<vga.draw.cursor.sline) goto skip_cursor;
-		if (line>vga.draw.cursor.eline) goto skip_cursor;
-		draw=(Bit16u*)&TempLine[font_addr*18];
-		Bit8u fg=vga.tandy.draw_base[vga.draw.cursor.address+1]&0xf;
-		for(int i = 0; i < 8; i++) {
-			*draw++ = vga.dac.xlat16[fg];
-		}
-		//if(underline && ((col&0x07) == 0x01)) 
-		//	*draw = vga.dac.xlat16[fg];
-	}
-skip_cursor:
-	return TempLine;
+        Bit8u font=(vga.draw.font_tables[(col >> 3)&1][chr*32+line])<<pel_pan;
+        if (underline && ((col&0x07) == 0x01)) font=0xff;
+        Bit8u fg=col&0xf;
+        Bit8u bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
+        Bitu draw_blocks=vga.draw.blocks;
+        draw_blocks++;
+        
+        Bitu cursor_position = ~Bitu();
+        /* BISQWIT FPS-hack change:  blink rate 8 (for default 70fps) -> 14 */
+        if (!vga.draw.cursor.enabled || !((vga.draw.cursor.count/14)&1)) goto skip_cursor;
+        {Bits font_addr = (vga.draw.cursor.address-vidstart) >> 1;
+        if (font_addr>=0 && font_addr<(Bits)vga.draw.blocks) {
+                if (line<vga.draw.cursor.sline) goto skip_cursor;
+                if (line>vga.draw.cursor.eline) goto skip_cursor;
+                cursor_position = 1 + font_addr;
+        }}
+skip_cursor:;
+
+        for (Bitu cx=1;cx<draw_blocks;cx++) {
+                Bitu ext1=0, ext2=0;
+                
+                if (pel_pan) {
+                        chr=vidmem[cx*2];
+                        col=vidmem[cx*2+1];
+                        if (underline && ((col&0x07) == 0x01)) font|=0xff>>(8-pel_pan);
+                        else font|=vga.draw.font_tables[(col >> 3)&1][chr*32+line]>>(8-pel_pan);
+                        fg=col&0xf;
+                        bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
+                } else {
+                        chr = vidmem[(cx-1)*2];
+                        col = vidmem[(cx-1)*2+1];
+                        ext1 = vidmem[(cx-1)*2 + 0x8000];
+                        ext2 = vidmem[(cx-1)*2 + 0x8001];
+                        if (underline && ((col&0x07) == 0x01)) font = 0xff;
+                        else font = vga.draw.font_tables[(col >> 3)&1][chr*32+line];
+                        fg=col&0xf;
+                        bg=(Bit8u)(TXT_BG_Table[col>>4]&0xff);
+                }
+                if(ext2 == 7 && ext1 == 0x20) ext2 = ext1 = 0;
+
+                bool flag_underline = ext2 & 0x01;
+                bool flag_dim       = ext2 & 0x02;
+                bool flag_italic    = ext2 & 0x04;
+                bool flag_bold      = ext2 & 0x08;
+                bool flag_blink     = ext2 & 0x20;
+                bool flag_ext       = (ext2 & col & 0x80);
+
+                if(!flag_ext)
+                {
+                    flag_blink = col >> 7;
+                    ext1       = col>>4;   ext1 = (ext1&1)*4 + (ext1&2) + (ext1&4)/4 + (ext1&8);
+                    col        = (col&15); col = (col&1)*4 + (col&2) + (col&4)/4 + (col&8);
+                }
+
+                if(!FontMask[flag_blink]) font = 0;
+
+                unsigned widefont;
+                if(cx == cursor_position)
+                    widefont = 0xFF << 1;
+                else
+                {
+                    widefont = font;
+
+                    widefont <<= 1;
+                    if(flag_italic && line < vga.draw.address_line_total*3/4) widefont >>= 1;
+
+                    if(!((vga.attr.mode_control&0x04) && ((chr<0xc0) || (chr>0xdf))))
+                        widefont |= (widefont & 2) >> 1;
+
+                    if(vga.draw.cursor.eline == 7)
+                    {
+                        // Check underline from LINE ABOVE
+                        unsigned offset = vga.draw.blocks*2;
+                        Bit8u prev_ext1 = vidmem[(cx-1)*2 + 0x8000 - offset];
+                        Bit8u prev_ext2 = vidmem[(cx-1)*2 + 0x8001 - offset];
+                        if((prev_ext2 & 1) && line == 0) { /*widefont = 0x1FF;*/ bg = ext1 = 8; }
+                    }
+                    else
+                    {
+                        if(flag_underline && line == vga.draw.cursor.eline)
+                        {
+                            //widefont = 0x1FF;
+                            bg = ext1 = 8;
+                        }
+                    }
+                }
+
+                //if(flag_ext)
+                {
+                    unsigned fg_attr = (col & 0x7F) | ((ext2 & 0x40) << 1);
+                    unsigned bg_attr = ext1;
+                    Bit32u fg = xterm256table[fg_attr];
+                    Bit32u bg = xterm256table[bg_attr];
+                    /*if(flag_bold || flag_dim)
+                    {
+                        if(line&1) fg = fg + (0x4<<5) + (0x4<<0);
+                        else       fg = fg + (0x4<<5) + (0x4<<11);
+                    }*/
+
+                    // 
+                    const unsigned mode = flag_dim + flag_bold*2 + flag_italic*4*((line*4/vga.draw.address_line_total)%3);
+                    static const unsigned char taketables[12][16] =
+                    {
+/*mode 0*/{0,0,0,0,3,3,3,3,0,0,0,0,3,3,3,3,},
+/*mode 1*/{0,0,0,0,1,1,3,3,0,0,0,0,1,1,3,3,},
+/*mode 2*/{0,0,0,0,3,3,3,3,1,1,1,1,3,3,3,3,},
+/*mode 3*/{0,0,0,0,1,1,3,3,1,1,1,1,1,1,3,3,},
+/*mode 4*/{0,0,1,1,2,2,3,3,0,0,1,1,2,2,3,3,},
+/*mode 5*/{0,0,0,1,1,1,2,3,0,0,0,1,1,1,2,3,},
+/*mode 6*/{0,0,1,1,2,2,3,3,1,1,2,2,2,2,3,3,},
+/*mode 7*/{0,0,0,1,1,1,2,3,1,1,1,2,1,1,2,3,},
+/*mode 8*/{0,0,2,2,1,1,3,3,0,0,2,2,1,1,3,3,},
+/*mode 9*/{0,0,1,2,0,0,2,3,0,0,1,2,0,0,2,3,},
+/*mode 10*/{0,0,2,2,2,2,3,3,0,0,2,2,2,2,3,3,},
+/*mode 11*/{0,0,1,2,1,1,2,3,0,0,1,2,1,1,2,3,},
+                    };
+                    Bit32u colors[4] = {bg, xterm256_blend12[bg_attr][fg_attr], xterm256_blend12[fg_attr][bg_attr], fg};
+                    for(unsigned i=0; i<9; ++i)
+                    {
+                        unsigned mask = ((widefont << 2) >> (8-i)) & 0xF;
+                        *draw++ = colors[taketables[mode][mask]];
+                    }
+                }
+                //else
+                //{
+                //    Bitu mask = 0x100;
+                //    for (unsigned i = 0; i < 9; i++) {
+                //            *draw++ = vga.dac.xlat16[(widefont & mask) ? fg : bg];
+                //            mask >>= 1;
+                //    }
+                //    if (pel_pan) {
+                //            if (underline && ((col&0x07) == 0x01)) font=0xff;
+                //            else font=(vga.draw.font_tables[(col >> 3)&1][chr*32+line])<<pel_pan;
+                //    }
+                //}
+        }
+        return TempLine;
 }
 
 #ifdef VGA_KEEP_CHANGES
diff --git a/src/hardware/vga_memory.cpp b/src/hardware/vga_memory.cpp
index 74f9752..0b9f2be 100644
--- a/src/hardware/vga_memory.cpp
+++ b/src/hardware/vga_memory.cpp
@@ -491,6 +491,22 @@ public:
 	}
 };
 
+class VGA_Map_Ext_Handler : public PageHandler {
+public:
+	VGA_Map_Ext_Handler() {
+		flags=PFLAG_READABLE|PFLAG_WRITEABLE|PFLAG_NOCODE;
+	}
+	HostPt GetHostReadPt(Bitu phys_page) {
+ 		phys_page-=VGA_PAGE_B0;
+		return &vga.mem.linear[0x8000 + CHECKED3(vga.svga.bank_read_full+phys_page*4096)];
+	}
+	HostPt GetHostWritePt(Bitu phys_page) {
+ 		phys_page-=VGA_PAGE_B0;
+		return &vga.mem.linear[0x8000 + CHECKED3(vga.svga.bank_write_full+phys_page*4096)];
+	}
+};
+static VGA_Map_Ext_Handler extMapHandler;
+
 class VGA_Changes_Handler : public PageHandler {
 public:
 	VGA_Changes_Handler() {
@@ -819,6 +835,7 @@ void VGA_SetupHandlers(void) {
 		break;
 	case M_LIN8:
 	case M_VGA:
+		fprintf(stderr, "Vga mode\n");
 		if (vga.config.chained) {
 			if(vga.config.compatible_chain4)
 				newHandler = &vgaph.cvga;
@@ -845,6 +862,7 @@ void VGA_SetupHandlers(void) {
 		break;
 	case M_CGA4:
 	case M_CGA2:
+		fprintf(stderr, "Cga mode\n");
 		newHandler = &vgaph.map;
 		break;
 	}
@@ -882,6 +900,11 @@ void VGA_SetupHandlers(void) {
 		MEM_SetPageHandler( VGA_PAGE_B8, 8, newHandler );
 		MEM_ResetPageHandler( VGA_PAGE_A0, 16 );
 		MEM_ResetPageHandler( VGA_PAGE_B0, 8 );
+		
+		if(newHandler == &vgaph.map)
+		{
+		    MEM_SetPageHandler( VGA_PAGE_B0, 8, &extMapHandler );
+		}
 		break;
 	}
 	if(svgaCard == SVGA_S3Trio && (vga.s3.ext_mem_ctrl & 0x10))
-- 
2.15.1

